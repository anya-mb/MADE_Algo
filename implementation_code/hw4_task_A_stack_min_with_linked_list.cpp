/* –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–º–æ–ø–∏—Å–Ω—ã–π —Å—Ç–µ–∫ –Ω–∞ —Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ (—Ç–æ–∂–µ —Å–∞–º–æ–ø–∏—Å–Ω–æ–º)
 *
 * A. –ú–∏–Ω–∏–º—É–º –Ω–∞ —Å—Ç–µ–∫–µ
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è—é—â—É—é —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:

1. –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç ùë• –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
2. –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
3. –í—ã–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (1‚â§ ùëõ ‚â§ 10^6). –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–¥–∞–Ω—ã —Å–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –í ùëñ‚Äì–æ–π —Å—Ç—Ä–æ–∫–µ —á–∏—Å–ª–æ ùë°ùëñ ‚Äî —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (1, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. 2, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è. 3, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞). –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùë• ‚Äî —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (‚àí10^9 ‚â§ ùë• ‚â§ 10^9). –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –ø—É—Å—Ç–∞.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–î–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –û—Ç–≤–µ—Ç—ã —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
8
1 2
1 3
1 -3
3
2
3
2
3

–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
-3
2
2
 */

#include <iostream>
#include <vector>

using std::vector;
using std::cin;
using std::cout;

class Node {
public:
    long long int data;
    Node* next;

    Node (long long int);
    void print ();
};

Node::Node(long long int value) {
    data = value;
    next = nullptr;
}

void Node::print() {
    cout << data;
}

class StackWithLinkedList {

public:
    Node* head;
    int size = 0;

    void push (Node* new_node);
    void pop ();
    int get_size ();
    long long int back ();

    void print ();
};

int StackWithLinkedList::get_size() {
    return size;
}

void StackWithLinkedList::push(Node* new_node) {

    if (size == 0) {
        head = new_node;

    } else {
        new_node->next = head;
        head = new_node;
    }

    size++;
}

void StackWithLinkedList::pop() {
    if (size == 0) {
        return;
    }

    Node* tmp = head;
    head = head->next;

    delete tmp;

    size--;
}

long long int StackWithLinkedList::back() {
    return head->data;
}

void StackWithLinkedList::print() {
    Node* tmp = head;

    while (tmp != nullptr) {
        tmp->print();
        cout << std::endl;
        tmp = tmp->next;
    }
}


class MinStack {
public:
    StackWithLinkedList stack_for_min;

    void push (Node* node);
    void pop ();
    int get_size ();
    long long int back ();

    void print();
};

void MinStack::push(Node *node) {

    if (stack_for_min.get_size() == 0) {
        stack_for_min.push(node);

    } else {
        long long int current_min = stack_for_min.back();

        stack_for_min.push(node);

        if (current_min < node->data) {
            stack_for_min.head->data = current_min;
        }

    }
}

void MinStack::pop() {
    stack_for_min.pop();
}

int MinStack::get_size() {
    return stack_for_min.get_size();
}

long long int MinStack::back() {
    return stack_for_min.back();
}

void MinStack::print() {
    cout << "stack_for_min:" << std::endl;
    stack_for_min.print();
}


int main() {

    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int n;
    cin >> n;

    int stack_operation;

    long long int value_to_add, min_value;

    MinStack stack;

    vector <int> min_array;


    for (int i = 0; i < n; i++) {
        cin >> stack_operation;

        if (stack_operation == 1) {
            cin >> value_to_add;
            Node *new_node = new Node(value_to_add);
            stack.push(new_node);

        } else if (stack_operation == 2) {
            stack.pop();

        } else if (stack_operation == 3) {
            min_value = stack.back();
            min_array.push_back(min_value);

        } else {
            continue;
        }

    }

    for (int i : min_array) {
        cout << i << std::endl;
    }

    return 0;
}