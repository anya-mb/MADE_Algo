/* —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∞–º–æ–ø–∏—Å–Ω–æ–º —Å–∞–º–æ—Ä–∞—Å—à–∏—Ä—è—é—â–µ–º—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–º –º–∞—Å—Å–∏–≤–µ
 *
 * C. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—á–µ—Ä–µ–¥—å
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑—ä—è—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É. –ö–æ–º–∞–Ω–¥–∞ ‚Äî —ç—Ç–æ –ª–∏–±–æ "+ N", –ª–∏–±–æ "-". –ö–æ–º–∞–Ω–¥–∞ "+ N" –æ–∑–Ω–∞—á–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —á–∏—Å–ª–∞ ùëÅ, –ø–æ –º–æ–¥—É–ª—é –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ 10^9. –ö–æ–º–∞–Ω–¥–∞ "-" –æ–∑–Ω–∞—á–∞–µ—Ç –∏–∑—ä—è—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ ‚Äî ùëö (1 ‚©Ω ùëö ‚©Ω 10^5). –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã, –ø–æ –æ–¥–Ω–æ–π –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –ø–æ –æ–¥–Ω–æ–º—É –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏–∑—ä—è—Ç–∏–π –∏–∑ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4
+ 1
+ 10
-
-

–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
1
10
 */

#include <iostream>
#include <string>

using std::cin;
using std::cout;

class QueueWithArray {

private:
    int size;
    int capacity;
    int begin;
    int end;

    int TIMES_SIZE_LOWER_THAN_CAPACITY_FOR_DECREASE = 4;
    int LENGTH_INCREASE_DECREASE_MULTIPLIER = 2;

    long long int *array;

    void decrease_capacity();
    void increase_capacity();
    void move_elements();

public:
    void push(long long int value);

    void pop_front();

    int get_size();

    long long int front();

    QueueWithArray(int capacity) {
        this->capacity = capacity;
        array = new long long int[capacity];
        this->size = 0;
        begin = 0;
        end = 0;
    }

    ~QueueWithArray() {
        delete[] array;
    }

};

void QueueWithArray::move_elements() {
    long long int *new_array = new long long int[capacity];

    if (end > begin) {
        std::copy(array + begin, array + end, new_array);
    } else {
        std::copy(array + begin, array + size, new_array);
        std::copy(array, array + end, new_array + end - begin);
    }
    begin = 0;
    end = size;

    delete[] array;
    array = new_array;
}

void QueueWithArray::decrease_capacity() {
    capacity /= LENGTH_INCREASE_DECREASE_MULTIPLIER;

    this->move_elements();
}

void QueueWithArray::increase_capacity() {
    capacity *= LENGTH_INCREASE_DECREASE_MULTIPLIER;

    this->move_elements();
}

void QueueWithArray::push(long long int new_value) {
    if (size + 1 == capacity) {
        increase_capacity();
    }

    array[end] = new_value;
    end = (end + 1) % capacity;
    size++;
}

void QueueWithArray::pop_front() {
    array[begin] = 0;
    begin = (begin + 1) % capacity;

    size--;

    if (size != 0 && size * TIMES_SIZE_LOWER_THAN_CAPACITY_FOR_DECREASE < capacity) {
        decrease_capacity();
    }
}

long long int QueueWithArray::front() {
    return array[begin];
}

int QueueWithArray::get_size() {
    return size;
}


int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int num_of_operations;
    cin >> num_of_operations;

    int INITIAL_CAPACITY = 4;

    QueueWithArray queue(INITIAL_CAPACITY);

    char operation;

    for (int i = 0; i < num_of_operations; ++i) {
        cin >> operation;

        if (operation == '+') {
            int number;
            cin >> number;

            queue.push(number);

        } else {
            int value_from_queue = queue.front();
            cout << value_from_queue << std::endl;
            queue.pop_front();

        }
    }


    return 0;
}
