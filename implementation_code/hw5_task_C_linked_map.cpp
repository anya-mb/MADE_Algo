/*
 * C. LinkedMap
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—à–∏—Ç—ã–π –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à —Ç–∞–±–ª–∏—Ü—ã.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100000. –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:

put ùë• ùë¶ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á—É ùë• –∑–Ω–∞—á–µ–Ω–∏–µ ùë¶. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å.
delete ùë• ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á ùë•. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ùë• –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.
get ùë• ‚Äî –µ—Å–ª–∏ –∫–ª—é—á ùë• –µ—Å—Ç—å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–µ–¥–∏—Ç–µ ¬´none¬ª.
prev ùë• ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á—É –Ω–∞—Ö–æ–¥—è—â–µ–º—É—Å—è –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ –≤—Å–µ—Ö, –Ω–æ –¥–æ ùë• –∏–ª–∏ ¬´none¬ª, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –∏–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç ùë•.
next ùë• ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á—É –Ω–∞—Ö–æ–¥—è—â–µ–º—É—Å—è –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö, –Ω–æ –ø–æ—Å–ª–µ ùë• –∏–ª–∏ ¬´none¬ª, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –∏–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç ùë•.

 –ö–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π get, prev, next. –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
put zero a
put one b
put two c
put three d
put four e
get two
prev two
next two
delete one
delete three
get two
prev two
next two
next four

–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
c
b
d
c
a
e
none

 */

#include <iostream>
#include <string>
#include <assert.h>
#include <vector>

using std::cin;
using std::cout;
using std::vector;
using std::string;

class Entity {
public:
    Entity(string new_key, string new_value, Entity* previous_entity) {
        key = new_key;
        value = new_value;
        next_added = nullptr;
        prev_added = previous_entity;
        next_entity_same_hash = nullptr;
        prev_entity_same_hash = nullptr;
        status = OCCUPIED_STATUS;
    }

    Entity(string new_key, string new_value) {
        key = new_key;
        value = new_value;
        next_added = nullptr;
        prev_added = nullptr;
        next_entity_same_hash = nullptr;
        prev_entity_same_hash = nullptr;
        status = OCCUPIED_STATUS;
    }

    Entity() {
        next_added = nullptr;
        prev_added = nullptr;
        next_entity_same_hash = nullptr;
        prev_entity_same_hash = nullptr;
        status = NOT_OCCUPIED_STATUS;
    }

    string get_value() {
        return value;
    }

    void set_value(string new_value) {
        value = new_value;
    }

    string get_key() {
        return key;
    }

    bool has_next_added() {
        return next_added != nullptr;
    }
    Entity* get_next_added() {
        return next_added;
    }
    void set_next_added(Entity* new_entity) {
        next_added = new_entity;
    }


    bool has_prev_added() {
        return prev_added != nullptr;
    }
    Entity* get_prev_added() {
        return prev_added;
    }
    void set_prev_added(Entity* new_entity) {
        prev_added = new_entity;
    }


    bool has_next_entity_same_hash() {
        return next_entity_same_hash != nullptr;
    }
    Entity* get_next_entity_same_hash() {
        return next_entity_same_hash;
    }
    void set_next_entity_same_hash(Entity* new_entity) {
        next_entity_same_hash = new_entity;
    }


    bool has_prev_entity_same_hash() {
        return prev_entity_same_hash != nullptr;
    }
    Entity* get_prev_entity_same_hash() {
        return prev_entity_same_hash;
    }
    void set_prev_entity_same_hash(Entity* new_entity) {
        prev_entity_same_hash = new_entity;
    }


    bool is_occupied() {
        return status == OCCUPIED_STATUS;
    }

private:
    string value;
    string key;
    Entity* next_added;
    Entity* prev_added;
    Entity* next_entity_same_hash;
    Entity* prev_entity_same_hash;

    int status;
    static const int NOT_OCCUPIED_STATUS = 0;
    static const int OCCUPIED_STATUS = 1;
};

class LinkedMap {
public:

    LinkedMap();
    virtual ~LinkedMap();

    void put(string key, string value);
    void delete_element(string key);
    string get(string key);
    string prev(string key);
    string next(string key);

private:

    vector <Entity *> elements;
    int size = 0;

    Entity* previously_added_entity = nullptr;

    static const int MAX_NUMBER_OF_ELEMENTS = 200000;
    static const int PRIME_FOR_HASH = 4000081;
    static const int MULTIPLIER_FOR_HASH = 11;

    int calculate_position(string initial_string);

    static const int NO_KEY_FOUND = -1;
    int find_element_position(string key);

    static const string inline ELEMENT_DOES_NOT_EXIST = string("none");

    Entity* get_entity(string key);

    string get_value_wrapper(Entity* current_entity);
};


LinkedMap::LinkedMap() {

    for (int i = 0; i < MAX_NUMBER_OF_ELEMENTS; i++) {
        Entity* entity = new Entity();
        elements.push_back(entity);
    }
}

LinkedMap::~LinkedMap() {
}

int LinkedMap::calculate_position(string initial_string) {
    int result = 0;

    for (char letter : initial_string) {
        int new_x = letter % PRIME_FOR_HASH;
        result = (result * MULTIPLIER_FOR_HASH + new_x) % PRIME_FOR_HASH;

    }

    result %= MAX_NUMBER_OF_ELEMENTS;

    return result;
}

void LinkedMap::put(string key, string value) {
    int existing_position = find_element_position(key);

    if (existing_position < 0) {
        // add new element
        Entity* new_entity;

        if (size == 0) {
            new_entity = new Entity(key, value);

        } else {
            new_entity = new Entity(key, value, previously_added_entity);
            previously_added_entity->set_next_added(new_entity);
        }

        int position_by_hash = calculate_position(key);
        Entity* previous_entity_at_position = elements.at(position_by_hash);

        if (previous_entity_at_position->is_occupied()) {
            // if collision

            // move to the last entity in linked list
            while (previous_entity_at_position->has_next_entity_same_hash()) {
                previous_entity_at_position = previous_entity_at_position->get_next_entity_same_hash();
            }

            previous_entity_at_position->set_next_entity_same_hash(new_entity);
            new_entity->set_prev_entity_same_hash(previous_entity_at_position);

        } else {
            // first node on linked list for this hash position

            elements.at(position_by_hash) = new_entity;

        }

        previously_added_entity = new_entity;
        size++;

    } else {
        // change value of existing key
        Entity* existing_entity = elements.at(existing_position);

        while (existing_entity->has_next_entity_same_hash()
               || existing_entity->get_key() == key) {

            if (existing_entity->get_key() == key) {
                existing_entity->set_value(value);
                break;

            } else {
                existing_entity = existing_entity->get_next_entity_same_hash();
            }
        }
    }
}

int LinkedMap::find_element_position(string key) {

    if (size == 0) {
        return NO_KEY_FOUND;
    }

    int position = calculate_position(key);

    Entity* entity = elements.at(position);

    if (entity == nullptr) {
        Entity* clean_entity = new Entity();
        entity = clean_entity;

        return NO_KEY_FOUND;
    }

    if (!entity->is_occupied()) {
        return NO_KEY_FOUND;

    } else {

        while (entity->has_next_entity_same_hash()
               || entity->get_key() == key) {

            if (entity->get_key() == key) {
                return position;

            } else {
                entity = entity->get_next_entity_same_hash();
            }
        }

        return NO_KEY_FOUND;
    }
}

void LinkedMap::delete_element(string key) {
    int existing_position = find_element_position(key);

    if (existing_position >= 0) {
        // element exists at position
        Entity* existing_entity = elements.at(existing_position);

        // iterate in linked list of positions with the same hashes
        // to find our entity with right key
        if (existing_entity->get_key() != key) {
            while (existing_entity->has_next_entity_same_hash()) {
                if (existing_entity->get_key() == key) {
                    break;

                } else {
                    existing_entity = existing_entity->get_next_entity_same_hash();
                }
            }
        }

        // fixing links for next_existing and previous_existing in added order
        if (existing_entity->has_prev_added()) {
            // not the first added to map
            Entity* previous_existing_entity = existing_entity->get_prev_added();

            if (existing_entity->has_next_added()) {

                Entity* next_existing_entity = existing_entity->get_next_added();

                next_existing_entity->set_prev_added(previous_existing_entity);
                previous_existing_entity->set_next_added(next_existing_entity);

            } else {

                previously_added_entity = previous_existing_entity;
                previous_existing_entity->set_next_added(nullptr);
            }

        } else {
            // the first added to map
            if (existing_entity->has_next_added()) {

                Entity* next_existing_entity = existing_entity->get_next_added();
                next_existing_entity->set_prev_added(nullptr);

            } else {

                // the only one element in map
                Entity* clean_entity = new Entity();
                existing_entity = clean_entity;
                previously_added_entity = nullptr;
            }
        }



        // fixing links for collisions
        if (!existing_entity->has_prev_entity_same_hash()) {
            // if this is head

            if (existing_entity->has_next_entity_same_hash()) {

                Entity* next_entity_same_hash = existing_entity->get_next_entity_same_hash();
                next_entity_same_hash->set_prev_entity_same_hash(nullptr);
                elements.at(existing_position) = next_entity_same_hash;

            } else {
                // if first and the only element
                Entity* clean_entity = new Entity();
                elements.at(existing_position) = clean_entity;

            }
        } else {
            // if not head

            Entity* prev_entity_same_hash = existing_entity->get_prev_entity_same_hash();

            if (existing_entity->has_next_entity_same_hash()) {

                Entity* next_entity_same_hash = existing_entity->get_next_entity_same_hash();
                next_entity_same_hash->set_prev_entity_same_hash(prev_entity_same_hash);
                prev_entity_same_hash->set_next_entity_same_hash(next_entity_same_hash);

            } else {

                prev_entity_same_hash->set_next_entity_same_hash(nullptr);
            }
        }

        // links are fixed, can finally delete element
        delete existing_entity;
        size--;
    }
}

Entity *LinkedMap::get_entity(string key) {
    int existing_position = find_element_position(key);

    if (existing_position < 0) {
        // entity does not exist
        return nullptr;
    }

    Entity* current_entity = elements.at(existing_position);

    if (current_entity == nullptr) {
        Entity* clean_entity = new Entity();
        current_entity = clean_entity;
        return nullptr;
    }

    if (!current_entity->is_occupied()) {
        return nullptr;
    }

    if (current_entity->get_key() == key) {
        return current_entity;
    }

    // search for this key in linked list
    if (!current_entity->has_next_entity_same_hash()) {
        throw;
    }
    while (current_entity->has_next_entity_same_hash()) {

        current_entity = current_entity->get_next_entity_same_hash();

        if (current_entity->get_key() == key) {
            return current_entity;
        }
    }
}

string LinkedMap::get_value_wrapper(Entity *current_entity) {
    if (current_entity == nullptr ) {
        return ELEMENT_DOES_NOT_EXIST;

    } else if (!current_entity->is_occupied()) {
        return ELEMENT_DOES_NOT_EXIST;

    } else {

        return current_entity->get_value();
    }
}

string LinkedMap::get(string key) {
    Entity* current_entity = get_entity(key);
    return get_value_wrapper(current_entity);
}

string LinkedMap::prev(string key) {
    Entity* current_entity = get_entity(key);

    if (current_entity == nullptr) {
        return ELEMENT_DOES_NOT_EXIST;

    }

    Entity* prev_entity = current_entity->get_prev_added();
    return get_value_wrapper(prev_entity);
}

string LinkedMap::next(string key) {
    Entity* current_entity = get_entity(key);

    if (current_entity == nullptr) {
        return ELEMENT_DOES_NOT_EXIST;
    }

    Entity* next_entity = current_entity->get_next_added();
    return get_value_wrapper(next_entity);
}





void t1() {
    LinkedMap linked_map;

    linked_map.put("zero", "a");
    linked_map.put("one", "b");
    linked_map.put("two", "c");
    linked_map.put("three", "d");
    linked_map.put("four", "e");

    string result1 = linked_map.get("two");
    assert(result1 == "c");
    string result2 = linked_map.prev("two");
    assert(result2 == "b");
    string result3 = linked_map.next("two");
    assert(result3 == "d");

    linked_map.delete_element("one");
    linked_map.delete_element("three");

    string result4 = linked_map.get("two");
    assert(result4 == "c");
    string result5 = linked_map.prev("two");
    assert(result5 == "a");
    string result6 = linked_map.next("two");
    assert(result6 == "e");

    string result7 = linked_map.next("four");
    assert(result7 == "none");
}

void t2() {
    LinkedMap linked_map;

    linked_map.put("hello", "privet");
    linked_map.put("bye", "poka");

    string result1 = linked_map.get("hello");
    assert(result1 == "privet");
    string result2 = linked_map.get("bye");
    assert(result2 == "poka");

    linked_map.delete_element("hello");

    string result4 = linked_map.get("hello");
    assert(result4 == "none");

}

void t3() {
    LinkedMap linked_map;

    linked_map.put("hello", "privet");
    linked_map.put("bye", "poka");

    string result1 = linked_map.get("hello");
    assert(result1 == "privet");
    string result2 = linked_map.get("bye");
    assert(result2 == "poka");

    linked_map.delete_element("hello");

    string result3 = linked_map.get("hello");
    assert(result3 == "none");

    linked_map.delete_element("hello");

    string result4 = linked_map.get("hello");
    assert(result4 == "none");

    linked_map.delete_element("bye");

    string result5 = linked_map.get("bye");
    assert(result5 == "none");

    linked_map.delete_element("wow");
    string result6 = linked_map.get("wow");
    assert(result6 == "none");
}

void t4() {
    LinkedMap linked_map;

    linked_map.put("hello", "privet");
    linked_map.put("bye", "poka");

    string result1 = linked_map.get("hello");
    assert(result1 == "privet");
    string result2 = linked_map.get("bye");
    assert(result2 == "poka");

    linked_map.delete_element("bye");

    string result3 = linked_map.get("bye");
    assert(result3 == "none");

    linked_map.put("wow", "wow");
    string result4 = linked_map.get("wow");
    assert(result4 == "wow");

    string result5 = linked_map.prev("wow");
    assert(result5 == "privet");

    string result6 = linked_map.next("hello");
    assert(result6 == "wow");

    linked_map.delete_element("wow");
    string result7 = linked_map.next("wow");
    assert(result7 == "none");

    string result8 = linked_map.next("hello");
    assert(result8 == "none");
}

void t5() {
    LinkedMap linked_map;

    linked_map.put("hello", "privet");
    linked_map.put("bye", "poka");
    linked_map.put("three", "privet3");
    linked_map.put("four", "poka4");
    linked_map.put("five", "privet5");
    linked_map.put("six", "poka6");

    string result1 = linked_map.get("hello");
    assert(result1 == "privet");
    string result2 = linked_map.get("bye");
    assert(result2 == "poka");

    linked_map.delete_element("bye");

    string result3 = linked_map.get("bye");
    assert(result3 == "none");

    linked_map.put("wow", "wow_val");
    string result4 = linked_map.get("wow");
    assert(result4 == "wow_val");

    string result5 = linked_map.prev("wow");
    assert(result5 == "poka6");

    string result6 = linked_map.next("hello");
    assert(result6 == "privet3");

    linked_map.delete_element("wow");
    string result7 = linked_map.next("wow");
    assert(result7 == "none");

    linked_map.delete_element("three");
    string result8 = linked_map.next("hello");
    assert(result8 == "poka4");
}

void test() {
    t1();
    t2();
    t3();
    t4();
    t5();
}

void input() {
    string operation;
    string key, value;
    LinkedMap linked_map;

    while (cin >> operation) {

        if (operation == std::string("put")) {
            cin >> key >> value;
            linked_map.put(key, value);

        } else if (operation == std::string("delete")) {
            cin >> key;
            linked_map.delete_element(key);

        } else if (operation == std::string("get")){
            cin >> key;
            cout << linked_map.get(key) << std::endl;

        } else if (operation == std::string("prev")){
            cin >> key;
            cout << linked_map.prev(key) << std::endl;

        } else if (operation == std::string("next")){
            cin >> key;
            cout << linked_map.next(key) << std::endl;

        } else {
            throw;
        }
    }
}



int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    input();
//    test();

    return 0;
}