/*
 * B. –†–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ùëõ —á–∏—Å–µ–ª. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞: –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ –º–µ–∂–¥—É ùë¢ –∏ ùë£ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–¥–∞–Ω—ã —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ, ùëö (1 ‚©Ω ùëõ ‚©Ω 10^5, 1 ‚©Ω ùëö ‚©Ω 10^7) –∏ ùëé_1 (0 ‚©Ω ùëé_1 < 16714589) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùë¢_1 –∏ ùë£_1 (1 ‚©Ω ùë¢_1, ùë£_1 ‚©Ω ùëõ) ‚Äî –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å.

–î–ª—è —Ç–æ–≥–æ, —Ä–∞–∑–º–µ—Ä –≤–≤–æ–¥–∞ –±—ã–ª –Ω–µ–±–æ–ª—å—à–æ–π, –º–∞—Å—Å–∏–≤ –∏ –∑–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è.

–≠–ª–µ–º–µ–Ω—Ç—ã ùëé2,ùëé3,‚Ä¶,ùëéùëõ –∑–∞–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º—É–ª–æ–π:
ùëé_{ùëñ + 1} = (23 ‚ãÖ ùëé_ùëñ + 21563) mod 16714589.

–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ ùëõ = 10, ùëé_1 = 12345 –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Å—Å–∏–≤: ùëé = (12345, 305498, 7048017, 11694653, 1565158, 2591019, 9471233, 570265, 13137658, 1325095).

–ó–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

ùë¢_{ùëñ + 1} = ((17 ‚ãÖ ùë¢_ùëñ + 751 + ùëü_ùëñ + 2ùëñ) mod ùëõ) + 1, ùë£_{ùëñ + 1} = ((13 ‚ãÖ ùë£_ùëñ + 593 + ùëü_ùëñ + 5ùëñ) mod ùëõ) + 1,
–≥–¥–µ ùëü_ùëñ ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä ùëñ.
–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ ùë¢_ùëñ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º ùë£_ùëñ.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤—ã–≤–µ–¥–∏—Ç–µ ùë¢_ùëö, ùë£_ùëö –∏ ùëü_ùëö (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ).

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
10 8 12345
3 9

–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
5 3 1565158
 *
 */


#include <iostream>
#include <vector>
#include <cmath>

using std::cin;
using std::cout;
using std::vector;

static int BIG_NUMBER = 16714589 + 1;

int calculate_a_i(long long int prev_a_i) {
    return (23 * prev_a_i + 21563) % 16714589;
}

int calculate_u_i(long long int prev_u_i, long long int prev_r_i, int i, int n) {
    return (17 * prev_u_i + 751 + prev_r_i + 2 * i) % n + 1;
}

int calculate_v_i(long long int prev_v_i, long long int prev_r_i, int i, int n) {
    return (13 * prev_v_i + 593 + prev_r_i + 5 * i) % n + 1;
}

vector <int> generate_max_power_array(int n) {
    vector <int> max_power_array;

    int power = 0;
    int two_in_the_power = std::pow(2, power);

    for (int i = 1; i < n + 1; i++) {

        if (i >= two_in_the_power) {
            two_in_the_power *= 2;
            power++;
        }

        max_power_array.push_back(power - 1);
    }
    return max_power_array;
}

vector<long long int> build_a_i_array(int n, long long int cur_a_i) {
    vector<long long int> a_i_array;
    a_i_array.push_back(cur_a_i);

    for (int i = 1; i < n; i++) {
        cur_a_i = calculate_a_i(cur_a_i);
        a_i_array.push_back(cur_a_i);
    }

    return a_i_array;
}


void build_a_i_array_sparce_table(vector<long long int> &a_i_array, vector <int> &max_power_array) {

    int n = a_i_array.size();
    int max_k = max_power_array.back();
    int two_power_k_prev = 1;

    for (int row_idx = 1; row_idx < max_k + 1; row_idx++) {

        for (int l = 0; l < n; l++) {
            int k_prev_l_idx = (row_idx - 1) * n + l;
            int k_prev_next_l_idx = k_prev_l_idx + two_power_k_prev;

            if (l + two_power_k_prev < n) {

                long long int min_k_prev_l = a_i_array.at(k_prev_l_idx);
                long long int min_k_prev_next_l = a_i_array.at(k_prev_next_l_idx);

                if (min_k_prev_l <= min_k_prev_next_l) {
                    a_i_array.push_back(min_k_prev_l);

                } else {
                    a_i_array.push_back(min_k_prev_next_l);
                }

            } else {
                a_i_array.push_back(BIG_NUMBER);
            }
        }

        two_power_k_prev *= 2;
    }
}

long long int min_from_left_to_right(vector<long long int> &a_i_array_dp,
                                     int left, int right,
                                     vector <int> &max_power_array, int n) {

    int k = max_power_array.at(right - left);
    int calculated_right = right - std::pow(2, k) + 1;

    long long int min_l_k = a_i_array_dp.at(k * n + left);
    long long int min_calc_r_k = a_i_array_dp.at(k * n + calculated_right);

    if (min_l_k <= min_calc_r_k) {
        return min_l_k;
    } else {
        return min_calc_r_k;
    }
}

long long int min_from_left_to_right_wrapper(vector<long long int> &a_i_array_dp,
                                     int left, int right,
                                     vector <int> &max_power_array, int n) {

    left--;
    right--;

    if (left <= right) {
        return min_from_left_to_right(a_i_array_dp, left, right, max_power_array, n);
    } else {
        return min_from_left_to_right(a_i_array_dp, right, left, max_power_array, n);
    }
}


vector <int> solve_rmq(int n, int m, long long int a_i, int u_i, int v_i) {

    int r_i;

    vector <int> max_power_array = generate_max_power_array(n);

    vector<long long int> a_i_array = build_a_i_array(n, a_i);
    build_a_i_array_sparce_table(a_i_array, max_power_array);

    r_i = min_from_left_to_right_wrapper(a_i_array, u_i, v_i, max_power_array, n);

    vector <int> result_u_v_r_array;

    if (m == 1) {
        result_u_v_r_array.insert(result_u_v_r_array.end(),{u_i, v_i, r_i});
        return result_u_v_r_array;
    }

    for (int i = 1; i < m; i++) {

        u_i = calculate_u_i(u_i, r_i, i, n);
        v_i = calculate_v_i(v_i, r_i, i, n);
        r_i = min_from_left_to_right_wrapper(a_i_array, u_i, v_i, max_power_array, n);
    }

    result_u_v_r_array.insert(result_u_v_r_array.end(),{u_i, v_i, r_i});
    return result_u_v_r_array;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    int n, m, u_i, v_i;
    long long int a_i;
    cin >> n >> m >> a_i >> u_i >> v_i;

    vector <int> result = solve_rmq(n, m, a_i, u_i, v_i);

    for (auto elem : result) {
        cout << elem << " ";
    }

    return 0;
}
